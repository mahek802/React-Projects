{"ast":null,"code":"import Chart from \"chart.js\";\n\n/**\r\n * @name AnnotationRenderer\r\n * AnnotationRenderer is responsible for affecting changes on the canvas.\r\n * It handles styling options and drawing from context. It takes in context\r\n * and the options from the chart config.\r\n * @param ctx context from chart.ctx\r\n * @param options options from chart.config.option.lineHeightAnnotation\r\n */\nexport class AnnotationRenderer {\n  constructor(ctx, options) {\n    this.ctx = ctx;\n    this.options = options;\n  }\n\n  /**\r\n   * Add shadow on the line from options. Affects all lines on canvas.\r\n   * Shadow Options: shadowColor, shadowBlur, shadowOffsetX, shadowOffsetY.\r\n   */\n  shadow() {\n    let options = this.options;\n    if (options.shadow) {\n      let ctx = this.ctx;\n      let {\n        shadow\n      } = options;\n      const _stroke = ctx.stroke;\n      ctx.stroke = function () {\n        ctx.save();\n        ctx.shadowColor = shadow.color ? shadow.color : \"rgba(0,0,0,0.35)\";\n        ctx.shadowBlur = shadow.blur ? shadow.blur : 10;\n        ctx.shadowOffsetX = shadow.offset ? shadow.offset.x : 0;\n        ctx.shadowOffsetY = shadow.offset ? shadow.offset.y : 3;\n        _stroke.apply(this, arguments);\n        ctx.restore();\n      };\n    }\n  }\n\n  /**\r\n   * Draw the line height annotation to the highest data point on the chart.\r\n   * @param {int} x horizontal coordinate on canvas\r\n   * @param {int} bottomY bottom Y dimension of the chart\r\n   * @param {float} highestDataY highest possible Y value on the chart, taking padding and border offsets into consideration.\r\n   */\n  drawLineHeightAnnotation(x, bottomY, highestDataY) {\n    let ctx = this.ctx;\n    let options = this.options;\n    ctx.save();\n    ctx.beginPath();\n    if (!options.noDash) {\n      ctx.setLineDash([10, 10]);\n    }\n    ctx.moveTo(x, highestDataY);\n    ctx.lineTo(x, bottomY);\n    ctx.lineWidth = options.lineWeight ? options.lineWeight : 1.5;\n    ctx.strokeStyle = options.color ? options.color : \"#000\";\n    ctx.stroke();\n    ctx.restore();\n  }\n}\n\n/**\r\n * @name LineChartUtils\r\n * LineChartUtils calculates metrics about the chart for annotations.\r\n * @param chart chartjs instance\r\n */\nexport class LineChartUtils {\n  constructor(chart) {\n    this.chart = chart;\n  }\n\n  /**\r\n   * calculate the highest possible Y value to draw the line to\r\n   * @param {array} pointMetrics array of dimensions\r\n   */\n  calculateHighestDataY(pointMetrics) {\n    let [bottomY, topY, maxY, tickMax, tickLow, borderWidth] = pointMetrics;\n    let yBRatio = bottomY * (maxY - tickLow);\n    let tMRatio = yBRatio / (tickMax - tickLow);\n    return bottomY - tMRatio + borderWidth * 2 + topY - 9;\n  }\n  isTooltipActive() {\n    return this.tooltip._active && this.tooltip._active.length;\n  }\n  isPointTooHigh(highestDataY, bottomY, tickLow) {\n    if (highestDataY > bottomY) {\n      highestDataY = bottomY - tickLow;\n    }\n    return highestDataY;\n  }\n  getPointFromDataset(set, activePoint) {\n    return set.data[activePoint._index].y ? set.data[activePoint._index].y : set.data[activePoint._index];\n  }\n  getPointMetrics(set, point, pointProps) {\n    let [maxY, borderWidth] = pointProps;\n    if (point > maxY) {\n      if (set.borderWidth) {\n        borderWidth = set.borderWidth;\n        maxY = point - borderWidth;\n      } else {\n        maxY = point;\n      }\n    }\n    return [maxY, borderWidth];\n  }\n  getMaximumDimensions(axis) {\n    if (axis.ticksAsNumbers) {\n      const tickMax = axis.ticksAsNumbers[0]; // first index is always the tallest\n      const tickLow = axis.ticksAsNumbers[axis.ticksAsNumbers.length - 1]; // lowest tick\n      let {\n        top,\n        bottom\n      } = axis;\n      return [tickMax, tickLow, top, bottom];\n    }\n    const tickLow = Number(axis.ticks[0]);\n    const tickMax = Number(axis.ticks[axis.ticks.length - 1]);\n    let {\n      top,\n      bottom\n    } = axis;\n    return [tickMax, tickLow, top, bottom];\n  }\n  get options() {\n    return this.chart.options.lineHeightAnnotation ? this.chart.options.lineHeightAnnotation : false;\n  }\n  get tooltip() {\n    return this.chart.tooltip;\n  }\n  get datasets() {\n    return this.chart.config.data.datasets;\n  }\n  get ticks() {\n    return this.chart.scales[\"x-axis-0\"].ticks;\n  }\n  get chartArea() {\n    return this.chart.chartArea;\n  }\n}\nconst plugin = {\n  id: \"lineHeightAnnotation\",\n  afterDatasetDraw: chart => {\n    const lineChartUtils = new LineChartUtils(chart);\n    const options = lineChartUtils.options;\n    const ctx = chart.ctx;\n    const optionsHandler = new AnnotationRenderer(ctx, options);\n    optionsHandler.shadow();\n    const xAxis = chart.scales[options.xAxis ? options.xAxis : \"x-axis-0\"];\n    const yAxis = chart.scales[options.yAxis ? options.yAxis : \"y-axis-0\"];\n\n    // Activity pages don't need this functionality.\n    if (!yAxis) {\n      return;\n    }\n    if (!xAxis) {\n      return;\n    }\n    let [tickMax, tickLow, topY, bottomY] = lineChartUtils.getMaximumDimensions(yAxis);\n    const datasets = lineChartUtils.datasets;\n    let meta = [];\n    let always = options.always === undefined ? true : options.always;\n    if (always) {\n      datasets.forEach((set, i) => {\n        meta.push(chart.getDatasetMeta(i).data);\n      });\n      let ticks = lineChartUtils.ticks;\n      for (let k = 0; k < ticks.length; k++) {\n        let xSpace = xAxis.getPixelForTick(k);\n        meta.map(set => {\n          let points = set.filter(point => {\n            return point._model.x === xSpace;\n          });\n          points.forEach(point => {\n            optionsHandler.drawLineHeightAnnotation(xSpace, bottomY, point._model.y);\n          });\n        });\n      }\n    }\n    let hover = options.hover || false;\n    // draw a dashed line when someone hovers over a data point\n    if (hover && lineChartUtils.isTooltipActive()) {\n      const activePoint = lineChartUtils.tooltip._active[0];\n      const x = activePoint.tooltipPosition().x;\n      let maxY = 1;\n      let borderWidth = 0;\n      datasets.forEach(set => {\n        // get maximum Y value\n        // get borderWidth of that dataset\n        let point = lineChartUtils.getPointFromDataset(set, activePoint);\n        [maxY, borderWidth] = lineChartUtils.getPointMetrics(set, point, [maxY, borderWidth]);\n      });\n      // calculate the height of the line.\n      // see function above in comment block.\n      let highestDataY = lineChartUtils.calculateHighestDataY([bottomY, topY, maxY, tickMax, tickLow, borderWidth]);\n\n      // if the calculated point has become too high it will extend below the chart\n      lineChartUtils.isPointTooHigh(highestDataY, bottomY, tickLow);\n\n      // draw line\n      // save the context, destroy the canvas, draw a new line,\n      // set the line settings (stroke) and then restore the canvas\n      optionsHandler.drawLineHeightAnnotation(x, bottomY, highestDataY);\n    }\n  }\n};\n\n// if the environment is neither amd nor commonjs, register the plugin globally for the samples and tests\nexport default plugin;\nif (!(typeof define === \"function\" && define.amd) && !(typeof module === \"object\" && module.exports)) {\n  Chart.pluginService.register(plugin);\n}","map":{"version":3,"names":["Chart","AnnotationRenderer","constructor","ctx","options","shadow","_stroke","stroke","save","shadowColor","color","shadowBlur","blur","shadowOffsetX","offset","x","shadowOffsetY","y","apply","arguments","restore","drawLineHeightAnnotation","bottomY","highestDataY","beginPath","noDash","setLineDash","moveTo","lineTo","lineWidth","lineWeight","strokeStyle","LineChartUtils","chart","calculateHighestDataY","pointMetrics","topY","maxY","tickMax","tickLow","borderWidth","yBRatio","tMRatio","isTooltipActive","tooltip","_active","length","isPointTooHigh","getPointFromDataset","set","activePoint","data","_index","getPointMetrics","point","pointProps","getMaximumDimensions","axis","ticksAsNumbers","top","bottom","Number","ticks","lineHeightAnnotation","datasets","config","scales","chartArea","plugin","id","afterDatasetDraw","lineChartUtils","optionsHandler","xAxis","yAxis","meta","always","undefined","forEach","i","push","getDatasetMeta","k","xSpace","getPixelForTick","map","points","filter","_model","hover","tooltipPosition","define","amd","module","exports","pluginService","register"],"sources":["C:/dash/dash-1/dash-1/node_modules/chartjs-plugin-lineheight-annotation/src/plugin.js"],"sourcesContent":["import Chart from \"chart.js\";\r\n\r\n/**\r\n * @name AnnotationRenderer\r\n * AnnotationRenderer is responsible for affecting changes on the canvas.\r\n * It handles styling options and drawing from context. It takes in context\r\n * and the options from the chart config.\r\n * @param ctx context from chart.ctx\r\n * @param options options from chart.config.option.lineHeightAnnotation\r\n */\r\nexport class AnnotationRenderer {\r\n  constructor(ctx, options) {\r\n    this.ctx = ctx;\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * Add shadow on the line from options. Affects all lines on canvas.\r\n   * Shadow Options: shadowColor, shadowBlur, shadowOffsetX, shadowOffsetY.\r\n   */\r\n  shadow() {\r\n    let options = this.options;\r\n    if (options.shadow) {\r\n      let ctx = this.ctx;\r\n      let { shadow } = options;\r\n      const _stroke = ctx.stroke;\r\n      ctx.stroke = function() {\r\n        ctx.save();\r\n        ctx.shadowColor = shadow.color ? shadow.color : \"rgba(0,0,0,0.35)\";\r\n        ctx.shadowBlur = shadow.blur ? shadow.blur : 10;\r\n        ctx.shadowOffsetX = shadow.offset ? shadow.offset.x : 0;\r\n        ctx.shadowOffsetY = shadow.offset ? shadow.offset.y : 3;\r\n        _stroke.apply(this, arguments);\r\n        ctx.restore();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw the line height annotation to the highest data point on the chart.\r\n   * @param {int} x horizontal coordinate on canvas\r\n   * @param {int} bottomY bottom Y dimension of the chart\r\n   * @param {float} highestDataY highest possible Y value on the chart, taking padding and border offsets into consideration.\r\n   */\r\n  drawLineHeightAnnotation(x, bottomY, highestDataY) {\r\n    let ctx = this.ctx;\r\n    let options = this.options;\r\n\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    if (!options.noDash) {\r\n      ctx.setLineDash([10, 10]);\r\n    }\r\n    ctx.moveTo(x, highestDataY);\r\n    ctx.lineTo(x, bottomY);\r\n    ctx.lineWidth = options.lineWeight ? options.lineWeight : 1.5;\r\n    ctx.strokeStyle = options.color ? options.color : \"#000\";\r\n    ctx.stroke();\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\n/**\r\n * @name LineChartUtils\r\n * LineChartUtils calculates metrics about the chart for annotations.\r\n * @param chart chartjs instance\r\n */\r\nexport class LineChartUtils {\r\n  constructor(chart) {\r\n    this.chart = chart;\r\n  }\r\n\r\n  /**\r\n   * calculate the highest possible Y value to draw the line to\r\n   * @param {array} pointMetrics array of dimensions\r\n   */\r\n  calculateHighestDataY(pointMetrics) {\r\n    let [bottomY, topY, maxY, tickMax, tickLow, borderWidth] = pointMetrics;\r\n    let yBRatio = bottomY * (maxY - tickLow);\r\n    let tMRatio = yBRatio / (tickMax - tickLow);\r\n    return bottomY - tMRatio + borderWidth * 2 + topY - 9;\r\n  }\r\n\r\n  isTooltipActive() {\r\n    return this.tooltip._active && this.tooltip._active.length;\r\n  }\r\n\r\n  isPointTooHigh(highestDataY, bottomY, tickLow) {\r\n    if (highestDataY > bottomY) {\r\n      highestDataY = bottomY - tickLow;\r\n    }\r\n    return highestDataY;\r\n  }\r\n\r\n  getPointFromDataset(set, activePoint) {\r\n    return set.data[activePoint._index].y\r\n      ? set.data[activePoint._index].y\r\n      : set.data[activePoint._index];\r\n  }\r\n\r\n  getPointMetrics(set, point, pointProps) {\r\n    let [maxY, borderWidth] = pointProps;\r\n    if (point > maxY) {\r\n      if (set.borderWidth) {\r\n        borderWidth = set.borderWidth;\r\n        maxY = point - borderWidth;\r\n      } else {\r\n        maxY = point;\r\n      }\r\n    }\r\n    return [maxY, borderWidth];\r\n  }\r\n\r\n  getMaximumDimensions(axis) {\r\n    if (axis.ticksAsNumbers) {\r\n      const tickMax = axis.ticksAsNumbers[0]; // first index is always the tallest\r\n      const tickLow = axis.ticksAsNumbers[axis.ticksAsNumbers.length - 1]; // lowest tick\r\n      let { top, bottom } = axis;\r\n      return [tickMax, tickLow, top, bottom];\r\n    }\r\n\r\n    const tickLow = Number(axis.ticks[0]);\r\n    const tickMax = Number(axis.ticks[axis.ticks.length - 1]);\r\n    let { top, bottom } = axis;\r\n    return [tickMax, tickLow, top, bottom];\r\n  }\r\n\r\n  get options() {\r\n    return this.chart.options.lineHeightAnnotation\r\n      ? this.chart.options.lineHeightAnnotation\r\n      : false;\r\n  }\r\n\r\n  get tooltip() {\r\n    return this.chart.tooltip;\r\n  }\r\n\r\n  get datasets() {\r\n    return this.chart.config.data.datasets;\r\n  }\r\n\r\n  get ticks() {\r\n    return this.chart.scales[\"x-axis-0\"].ticks;\r\n  }\r\n\r\n  get chartArea() {\r\n    return this.chart.chartArea;\r\n  }\r\n}\r\n\r\nconst plugin = {\r\n  id: \"lineHeightAnnotation\",\r\n  afterDatasetDraw: chart => {\r\n    const lineChartUtils = new LineChartUtils(chart);\r\n    const options = lineChartUtils.options;\r\n    const ctx = chart.ctx;\r\n\r\n    const optionsHandler = new AnnotationRenderer(ctx, options);\r\n    optionsHandler.shadow();\r\n\r\n    const xAxis = chart.scales[options.xAxis ? options.xAxis : \"x-axis-0\"];\r\n    const yAxis = chart.scales[options.yAxis ? options.yAxis : \"y-axis-0\"];\r\n\r\n    // Activity pages don't need this functionality.\r\n    if (!yAxis) {\r\n      return;\r\n    }\r\n\r\n    if (!xAxis) {\r\n      return;\r\n    }\r\n\r\n    let [tickMax, tickLow, topY, bottomY] = lineChartUtils.getMaximumDimensions(\r\n      yAxis\r\n    );\r\n\r\n    const datasets = lineChartUtils.datasets;\r\n    let meta = [];\r\n\r\n    let always = options.always === undefined ? true : options.always;\r\n    if (always) {\r\n      datasets.forEach((set, i) => {\r\n        meta.push(chart.getDatasetMeta(i).data);\r\n      });\r\n\r\n      let ticks = lineChartUtils.ticks;\r\n\r\n      for (let k = 0; k < ticks.length; k++) {\r\n        let xSpace = xAxis.getPixelForTick(k);\r\n        meta.map(set => {\r\n          let points = set.filter(point => {\r\n            return point._model.x === xSpace;\r\n          });\r\n\r\n          points.forEach(point => {\r\n            optionsHandler.drawLineHeightAnnotation(\r\n              xSpace,\r\n              bottomY,\r\n              point._model.y\r\n            );\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    let hover = options.hover || false;\r\n    // draw a dashed line when someone hovers over a data point\r\n    if (hover && lineChartUtils.isTooltipActive()) {\r\n      const activePoint = lineChartUtils.tooltip._active[0];\r\n      const x = activePoint.tooltipPosition().x;\r\n      let maxY = 1;\r\n      let borderWidth = 0;\r\n\r\n      datasets.forEach(set => {\r\n        // get maximum Y value\r\n        // get borderWidth of that dataset\r\n        let point = lineChartUtils.getPointFromDataset(set, activePoint);\r\n        [maxY, borderWidth] = lineChartUtils.getPointMetrics(set, point, [\r\n          maxY,\r\n          borderWidth\r\n        ]);\r\n      });\r\n      // calculate the height of the line.\r\n      // see function above in comment block.\r\n      let highestDataY = lineChartUtils.calculateHighestDataY([\r\n        bottomY,\r\n        topY,\r\n        maxY,\r\n        tickMax,\r\n        tickLow,\r\n        borderWidth\r\n      ]);\r\n\r\n      // if the calculated point has become too high it will extend below the chart\r\n      lineChartUtils.isPointTooHigh(highestDataY, bottomY, tickLow);\r\n\r\n      // draw line\r\n      // save the context, destroy the canvas, draw a new line,\r\n      // set the line settings (stroke) and then restore the canvas\r\n      optionsHandler.drawLineHeightAnnotation(x, bottomY, highestDataY);\r\n    }\r\n  }\r\n};\r\n\r\n// if the environment is neither amd nor commonjs, register the plugin globally for the samples and tests\r\nexport default plugin;\r\nif (\r\n  !(typeof define === \"function\" && define.amd) &&\r\n  !(typeof module === \"object\" && module.exports)\r\n) {\r\n  Chart.pluginService.register(plugin);\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,UAAU;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,CAAC;EAC9BC,WAAWA,CAACC,GAAG,EAAEC,OAAO,EAAE;IACxB,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;EAEA;AACF;AACA;AACA;EACEC,MAAMA,CAAA,EAAG;IACP,IAAID,OAAO,GAAG,IAAI,CAACA,OAAO;IAC1B,IAAIA,OAAO,CAACC,MAAM,EAAE;MAClB,IAAIF,GAAG,GAAG,IAAI,CAACA,GAAG;MAClB,IAAI;QAAEE;MAAO,CAAC,GAAGD,OAAO;MACxB,MAAME,OAAO,GAAGH,GAAG,CAACI,MAAM;MAC1BJ,GAAG,CAACI,MAAM,GAAG,YAAW;QACtBJ,GAAG,CAACK,IAAI,CAAC,CAAC;QACVL,GAAG,CAACM,WAAW,GAAGJ,MAAM,CAACK,KAAK,GAAGL,MAAM,CAACK,KAAK,GAAG,kBAAkB;QAClEP,GAAG,CAACQ,UAAU,GAAGN,MAAM,CAACO,IAAI,GAAGP,MAAM,CAACO,IAAI,GAAG,EAAE;QAC/CT,GAAG,CAACU,aAAa,GAAGR,MAAM,CAACS,MAAM,GAAGT,MAAM,CAACS,MAAM,CAACC,CAAC,GAAG,CAAC;QACvDZ,GAAG,CAACa,aAAa,GAAGX,MAAM,CAACS,MAAM,GAAGT,MAAM,CAACS,MAAM,CAACG,CAAC,GAAG,CAAC;QACvDX,OAAO,CAACY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QAC9BhB,GAAG,CAACiB,OAAO,CAAC,CAAC;MACf,CAAC;IACH;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,wBAAwBA,CAACN,CAAC,EAAEO,OAAO,EAAEC,YAAY,EAAE;IACjD,IAAIpB,GAAG,GAAG,IAAI,CAACA,GAAG;IAClB,IAAIC,OAAO,GAAG,IAAI,CAACA,OAAO;IAE1BD,GAAG,CAACK,IAAI,CAAC,CAAC;IACVL,GAAG,CAACqB,SAAS,CAAC,CAAC;IACf,IAAI,CAACpB,OAAO,CAACqB,MAAM,EAAE;MACnBtB,GAAG,CAACuB,WAAW,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3B;IACAvB,GAAG,CAACwB,MAAM,CAACZ,CAAC,EAAEQ,YAAY,CAAC;IAC3BpB,GAAG,CAACyB,MAAM,CAACb,CAAC,EAAEO,OAAO,CAAC;IACtBnB,GAAG,CAAC0B,SAAS,GAAGzB,OAAO,CAAC0B,UAAU,GAAG1B,OAAO,CAAC0B,UAAU,GAAG,GAAG;IAC7D3B,GAAG,CAAC4B,WAAW,GAAG3B,OAAO,CAACM,KAAK,GAAGN,OAAO,CAACM,KAAK,GAAG,MAAM;IACxDP,GAAG,CAACI,MAAM,CAAC,CAAC;IACZJ,GAAG,CAACiB,OAAO,CAAC,CAAC;EACf;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMY,cAAc,CAAC;EAC1B9B,WAAWA,CAAC+B,KAAK,EAAE;IACjB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;;EAEA;AACF;AACA;AACA;EACEC,qBAAqBA,CAACC,YAAY,EAAE;IAClC,IAAI,CAACb,OAAO,EAAEc,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAEC,WAAW,CAAC,GAAGL,YAAY;IACvE,IAAIM,OAAO,GAAGnB,OAAO,IAAIe,IAAI,GAAGE,OAAO,CAAC;IACxC,IAAIG,OAAO,GAAGD,OAAO,IAAIH,OAAO,GAAGC,OAAO,CAAC;IAC3C,OAAOjB,OAAO,GAAGoB,OAAO,GAAGF,WAAW,GAAG,CAAC,GAAGJ,IAAI,GAAG,CAAC;EACvD;EAEAO,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACC,OAAO,CAACC,OAAO,IAAI,IAAI,CAACD,OAAO,CAACC,OAAO,CAACC,MAAM;EAC5D;EAEAC,cAAcA,CAACxB,YAAY,EAAED,OAAO,EAAEiB,OAAO,EAAE;IAC7C,IAAIhB,YAAY,GAAGD,OAAO,EAAE;MAC1BC,YAAY,GAAGD,OAAO,GAAGiB,OAAO;IAClC;IACA,OAAOhB,YAAY;EACrB;EAEAyB,mBAAmBA,CAACC,GAAG,EAAEC,WAAW,EAAE;IACpC,OAAOD,GAAG,CAACE,IAAI,CAACD,WAAW,CAACE,MAAM,CAAC,CAACnC,CAAC,GACjCgC,GAAG,CAACE,IAAI,CAACD,WAAW,CAACE,MAAM,CAAC,CAACnC,CAAC,GAC9BgC,GAAG,CAACE,IAAI,CAACD,WAAW,CAACE,MAAM,CAAC;EAClC;EAEAC,eAAeA,CAACJ,GAAG,EAAEK,KAAK,EAAEC,UAAU,EAAE;IACtC,IAAI,CAAClB,IAAI,EAAEG,WAAW,CAAC,GAAGe,UAAU;IACpC,IAAID,KAAK,GAAGjB,IAAI,EAAE;MAChB,IAAIY,GAAG,CAACT,WAAW,EAAE;QACnBA,WAAW,GAAGS,GAAG,CAACT,WAAW;QAC7BH,IAAI,GAAGiB,KAAK,GAAGd,WAAW;MAC5B,CAAC,MAAM;QACLH,IAAI,GAAGiB,KAAK;MACd;IACF;IACA,OAAO,CAACjB,IAAI,EAAEG,WAAW,CAAC;EAC5B;EAEAgB,oBAAoBA,CAACC,IAAI,EAAE;IACzB,IAAIA,IAAI,CAACC,cAAc,EAAE;MACvB,MAAMpB,OAAO,GAAGmB,IAAI,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;MACxC,MAAMnB,OAAO,GAAGkB,IAAI,CAACC,cAAc,CAACD,IAAI,CAACC,cAAc,CAACZ,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;MACrE,IAAI;QAAEa,GAAG;QAAEC;MAAO,CAAC,GAAGH,IAAI;MAC1B,OAAO,CAACnB,OAAO,EAAEC,OAAO,EAAEoB,GAAG,EAAEC,MAAM,CAAC;IACxC;IAEA,MAAMrB,OAAO,GAAGsB,MAAM,CAACJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;IACrC,MAAMxB,OAAO,GAAGuB,MAAM,CAACJ,IAAI,CAACK,KAAK,CAACL,IAAI,CAACK,KAAK,CAAChB,MAAM,GAAG,CAAC,CAAC,CAAC;IACzD,IAAI;MAAEa,GAAG;MAAEC;IAAO,CAAC,GAAGH,IAAI;IAC1B,OAAO,CAACnB,OAAO,EAAEC,OAAO,EAAEoB,GAAG,EAAEC,MAAM,CAAC;EACxC;EAEA,IAAIxD,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAC6B,KAAK,CAAC7B,OAAO,CAAC2D,oBAAoB,GAC1C,IAAI,CAAC9B,KAAK,CAAC7B,OAAO,CAAC2D,oBAAoB,GACvC,KAAK;EACX;EAEA,IAAInB,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACX,KAAK,CAACW,OAAO;EAC3B;EAEA,IAAIoB,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC/B,KAAK,CAACgC,MAAM,CAACd,IAAI,CAACa,QAAQ;EACxC;EAEA,IAAIF,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC7B,KAAK,CAACiC,MAAM,CAAC,UAAU,CAAC,CAACJ,KAAK;EAC5C;EAEA,IAAIK,SAASA,CAAA,EAAG;IACd,OAAO,IAAI,CAAClC,KAAK,CAACkC,SAAS;EAC7B;AACF;AAEA,MAAMC,MAAM,GAAG;EACbC,EAAE,EAAE,sBAAsB;EAC1BC,gBAAgB,EAAErC,KAAK,IAAI;IACzB,MAAMsC,cAAc,GAAG,IAAIvC,cAAc,CAACC,KAAK,CAAC;IAChD,MAAM7B,OAAO,GAAGmE,cAAc,CAACnE,OAAO;IACtC,MAAMD,GAAG,GAAG8B,KAAK,CAAC9B,GAAG;IAErB,MAAMqE,cAAc,GAAG,IAAIvE,kBAAkB,CAACE,GAAG,EAAEC,OAAO,CAAC;IAC3DoE,cAAc,CAACnE,MAAM,CAAC,CAAC;IAEvB,MAAMoE,KAAK,GAAGxC,KAAK,CAACiC,MAAM,CAAC9D,OAAO,CAACqE,KAAK,GAAGrE,OAAO,CAACqE,KAAK,GAAG,UAAU,CAAC;IACtE,MAAMC,KAAK,GAAGzC,KAAK,CAACiC,MAAM,CAAC9D,OAAO,CAACsE,KAAK,GAAGtE,OAAO,CAACsE,KAAK,GAAG,UAAU,CAAC;;IAEtE;IACA,IAAI,CAACA,KAAK,EAAE;MACV;IACF;IAEA,IAAI,CAACD,KAAK,EAAE;MACV;IACF;IAEA,IAAI,CAACnC,OAAO,EAAEC,OAAO,EAAEH,IAAI,EAAEd,OAAO,CAAC,GAAGiD,cAAc,CAACf,oBAAoB,CACzEkB,KACF,CAAC;IAED,MAAMV,QAAQ,GAAGO,cAAc,CAACP,QAAQ;IACxC,IAAIW,IAAI,GAAG,EAAE;IAEb,IAAIC,MAAM,GAAGxE,OAAO,CAACwE,MAAM,KAAKC,SAAS,GAAG,IAAI,GAAGzE,OAAO,CAACwE,MAAM;IACjE,IAAIA,MAAM,EAAE;MACVZ,QAAQ,CAACc,OAAO,CAAC,CAAC7B,GAAG,EAAE8B,CAAC,KAAK;QAC3BJ,IAAI,CAACK,IAAI,CAAC/C,KAAK,CAACgD,cAAc,CAACF,CAAC,CAAC,CAAC5B,IAAI,CAAC;MACzC,CAAC,CAAC;MAEF,IAAIW,KAAK,GAAGS,cAAc,CAACT,KAAK;MAEhC,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,KAAK,CAAChB,MAAM,EAAEoC,CAAC,EAAE,EAAE;QACrC,IAAIC,MAAM,GAAGV,KAAK,CAACW,eAAe,CAACF,CAAC,CAAC;QACrCP,IAAI,CAACU,GAAG,CAACpC,GAAG,IAAI;UACd,IAAIqC,MAAM,GAAGrC,GAAG,CAACsC,MAAM,CAACjC,KAAK,IAAI;YAC/B,OAAOA,KAAK,CAACkC,MAAM,CAACzE,CAAC,KAAKoE,MAAM;UAClC,CAAC,CAAC;UAEFG,MAAM,CAACR,OAAO,CAACxB,KAAK,IAAI;YACtBkB,cAAc,CAACnD,wBAAwB,CACrC8D,MAAM,EACN7D,OAAO,EACPgC,KAAK,CAACkC,MAAM,CAACvE,CACf,CAAC;UACH,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;IACF;IAEA,IAAIwE,KAAK,GAAGrF,OAAO,CAACqF,KAAK,IAAI,KAAK;IAClC;IACA,IAAIA,KAAK,IAAIlB,cAAc,CAAC5B,eAAe,CAAC,CAAC,EAAE;MAC7C,MAAMO,WAAW,GAAGqB,cAAc,CAAC3B,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC;MACrD,MAAM9B,CAAC,GAAGmC,WAAW,CAACwC,eAAe,CAAC,CAAC,CAAC3E,CAAC;MACzC,IAAIsB,IAAI,GAAG,CAAC;MACZ,IAAIG,WAAW,GAAG,CAAC;MAEnBwB,QAAQ,CAACc,OAAO,CAAC7B,GAAG,IAAI;QACtB;QACA;QACA,IAAIK,KAAK,GAAGiB,cAAc,CAACvB,mBAAmB,CAACC,GAAG,EAAEC,WAAW,CAAC;QAChE,CAACb,IAAI,EAAEG,WAAW,CAAC,GAAG+B,cAAc,CAAClB,eAAe,CAACJ,GAAG,EAAEK,KAAK,EAAE,CAC/DjB,IAAI,EACJG,WAAW,CACZ,CAAC;MACJ,CAAC,CAAC;MACF;MACA;MACA,IAAIjB,YAAY,GAAGgD,cAAc,CAACrC,qBAAqB,CAAC,CACtDZ,OAAO,EACPc,IAAI,EACJC,IAAI,EACJC,OAAO,EACPC,OAAO,EACPC,WAAW,CACZ,CAAC;;MAEF;MACA+B,cAAc,CAACxB,cAAc,CAACxB,YAAY,EAAED,OAAO,EAAEiB,OAAO,CAAC;;MAE7D;MACA;MACA;MACAiC,cAAc,CAACnD,wBAAwB,CAACN,CAAC,EAAEO,OAAO,EAAEC,YAAY,CAAC;IACnE;EACF;AACF,CAAC;;AAED;AACA,eAAe6C,MAAM;AACrB,IACE,EAAE,OAAOuB,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,GAAG,CAAC,IAC7C,EAAE,OAAOC,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACC,OAAO,CAAC,EAC/C;EACA9F,KAAK,CAAC+F,aAAa,CAACC,QAAQ,CAAC5B,MAAM,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}